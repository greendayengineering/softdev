---
swagger: "2.0"
info:
  description: "Wifi Dongle Rental Application \n[http://swagger.io](http://swagger.io)\
    \ or on \n[irc.freenode.net, #swagger](http://swagger.io/irc/).\n"
  version: "1.0.0"
  title: "Dongle Rental Application"
  termsOfService: "http://swagger.io/terms/"
  contact:
    email: "apiteam@swagger.io"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "virtserver.swaggerhub.com"
basePath: "/GreendayEngineering/DongleApp/1.0.0"
tags:
- name: "wifidongle"
  description: "an application for renting wifi dongles"
  externalDocs:
    description: "Find out more"
    url: "http://swagger.io"
- name: "rental"
  description: "rent a wifi dongle"
- name: "customer"
  description: "Operations about customer"
  externalDocs:
    description: "Find out more about our Wifi Dongle Rental Store"
    url: "http://swagger.io"
schemes:
- "https"
- "http"
paths:
  /customer:
    post:
      tags:
      - "customer"
      summary: "Create a new customer"
      operationId: "addCustomer"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - in: "body"
        name: "body"
        description: "Customer that is to be added to our account list"
        required: true
        schema:
          $ref: "#/definitions/Customer"
      responses:
        405:
          description: "Invalid input"
      x-swagger-router-controller: "Customer"
    put:
      tags:
      - "customer"
      summary: "Update an existing customer"
      operationId: "updateCustomer"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - in: "body"
        name: "body"
        description: "Customer to be updated"
        required: true
        schema:
          $ref: "#/definitions/Customer"
      responses:
        400:
          description: "Invalid ID supplied"
        404:
          description: "Customer not found"
        405:
          description: "Validation exception"
      x-swagger-router-controller: "Customer"
  /dongle:
    post:
      tags:
      - "dongle"
      summary: "add a new dongle"
      operationId: "addDongle"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - in: "body"
        name: "body"
        description: "dongle to be added"
        required: true
        schema:
          $ref: "#/definitions/Dongle"
      responses:
        405:
          description: "Invalid input"
      x-swagger-router-controller: "Dongle"
  /dongle/findByStatus:
    get:
      tags:
      - "dongle"
      summary: "Finds Dongles by status"
      description: "Multiple status values can be provided with comma separated strings"
      operationId: "findPetsByStatus"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "status"
        in: "query"
        description: "Status values that need to be considered for filter"
        required: true
        type: "array"
        items:
          type: "string"
          default: "available"
          enum:
          - "available"
          - "pending"
          - "sold"
        collectionFormat: "multi"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Dongle"
        400:
          description: "Invalid status value"
      x-swagger-router-controller: "Dongle"
  /dongle/findByTags:
    get:
      tags:
      - "dongle"
      summary: "Finds Dongles by tags"
      description: "Muliple tags can be provided with comma separated strings. Use\\\
        \ \\ tag1, tag2, tag3 for testing."
      operationId: "findDonglesByTags"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "tags"
        in: "query"
        description: "Tags to filter by"
        required: true
        type: "array"
        items:
          type: "string"
        collectionFormat: "multi"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Dongle"
        400:
          description: "Invalid tag value"
      deprecated: true
      x-swagger-router-controller: "Dongle"
  /dongle/{dongleId}:
    get:
      tags:
      - "dongle"
      summary: "Find dongle by ID"
      description: "Returns a single dongle"
      operationId: "getDongleById"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "dongleId"
        in: "path"
        description: "ID of dongle to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Dongle"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Pet not found"
      security:
      - api_key: []
      x-swagger-router-controller: "Dongle"
    delete:
      tags:
      - "dongle"
      summary: "Deletes a dongle"
      operationId: "deleteDongle"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "api_key"
        in: "header"
        required: false
        type: "string"
      - name: "dongleId"
        in: "path"
        description: "Dongle id to delete"
        required: true
        type: "integer"
        format: "int64"
      responses:
        400:
          description: "Invalid ID supplied"
        404:
          description: "Dongle not found"
      x-swagger-router-controller: "Dongle"
  /dongle/{dongleId}/uploadImage:
    post:
      tags:
      - "dongle"
      summary: "uploads an image"
      operationId: "uploadFile"
      consumes:
      - "multipart/form-data"
      produces:
      - "application/json"
      parameters:
      - name: "dongleId"
        in: "path"
        description: "ID of dongle to update"
        required: true
        type: "integer"
        format: "int64"
      - name: "additionalMetadata"
        in: "formData"
        description: "Additional data to pass to server"
        required: false
        type: "string"
      - name: "file"
        in: "formData"
        description: "file to upload"
        required: false
        type: "file"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/ApiResponse"
      x-swagger-router-controller: "Dongle"
  /store/inventory:
    get:
      tags:
      - "store"
      summary: "Returns dongle inventories by status"
      description: "Returns a map of status codes to quantities"
      operationId: "getInventory"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "successful operation"
          schema:
            type: "object"
            additionalProperties:
              type: "integer"
              format: "int32"
      security:
      - api_key: []
      x-swagger-router-controller: "Store"
  /store/order:
    post:
      tags:
      - "store"
      summary: "Place an order for a dongle"
      operationId: "placeOrder"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - in: "body"
        name: "body"
        description: "order placed for purchasing the dongle"
        required: true
        schema:
          $ref: "#/definitions/Order"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Order"
        400:
          description: "Invalid Order"
      x-swagger-router-controller: "Store"
  /store/order/{orderId}:
    get:
      tags:
      - "store"
      summary: "Find purchase order by ID"
      description: "For valid response try integer IDs with value >= 1 and <= 10.\\\
        \ \\ Other values will generated exceptions"
      operationId: "getOrderById"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "orderId"
        in: "path"
        description: "ID of dongle that needs to be fetched"
        required: true
        type: "integer"
        maximum: 10.0
        minimum: 1.0
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Order"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Order not found"
      x-swagger-router-controller: "Store"
    delete:
      tags:
      - "store"
      summary: "Delete purchase order by ID"
      description: "For valid response try integer IDs with positive integer value.\\\
        \ \\ Negative or non-integer values will generate API errors"
      operationId: "deleteOrder"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "orderId"
        in: "path"
        description: "ID of the order that needs to be deleted"
        required: true
        type: "integer"
        minimum: 1.0
        format: "int64"
      responses:
        400:
          description: "Invalid ID supplied"
        404:
          description: "Order not found"
      x-swagger-router-controller: "Store"
  /user:
    post:
      tags:
      - "user"
      summary: "Create user"
      description: "This can only be done by the logged in user."
      operationId: "createUser"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - in: "body"
        name: "body"
        description: "Created user object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        default:
          description: "successful operation"
      x-swagger-router-controller: "User"
  /user/createWithArray:
    post:
      tags:
      - "user"
      summary: "Creates list of users with given input array"
      operationId: "createUsersWithArrayInput"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - in: "body"
        name: "body"
        description: "List of user object"
        required: true
        schema:
          type: "array"
          items:
            $ref: "#/definitions/User"
      responses:
        default:
          description: "successful operation"
      x-swagger-router-controller: "User"
  /user/createWithList:
    post:
      tags:
      - "user"
      summary: "Creates list of users with given input array"
      operationId: "createUsersWithListInput"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - in: "body"
        name: "body"
        description: "List of user object"
        required: true
        schema:
          type: "array"
          items:
            $ref: "#/definitions/User"
      responses:
        default:
          description: "successful operation"
      x-swagger-router-controller: "User"
  /user/login:
    get:
      tags:
      - "user"
      summary: "Logs user into the system"
      operationId: "loginUser"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "username"
        in: "query"
        description: "The user name for login"
        required: true
        type: "string"
      - name: "password"
        in: "query"
        description: "The password for login in clear text"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          headers:
            X-Rate-Limit:
              type: "integer"
              format: "int32"
              description: "calls per hour allowed by the user"
            X-Expires-After:
              type: "string"
              format: "date-time"
              description: "date in UTC when token expires"
          schema:
            type: "string"
        400:
          description: "Invalid username/password supplied"
      x-swagger-router-controller: "User"
  /user/logout:
    get:
      tags:
      - "user"
      summary: "Logs out current logged in user session"
      operationId: "logoutUser"
      produces:
      - "application/json"
      - "application/xml"
      parameters: []
      responses:
        default:
          description: "successful operation"
      x-swagger-router-controller: "User"
  /user/{username}:
    get:
      tags:
      - "user"
      summary: "Get user by user name"
      operationId: "getUserByName"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "username"
        in: "path"
        description: "The name that needs to be fetched. Use user1 for testing."
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"
        400:
          description: "Invalid username supplied"
        404:
          description: "User not found"
      x-swagger-router-controller: "User"
    put:
      tags:
      - "user"
      summary: "Updated user"
      description: "This can only be done by the logged in user."
      operationId: "updateUser"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "username"
        in: "path"
        description: "name that need to be updated"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Updated user object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        400:
          description: "Invalid user supplied"
        404:
          description: "User not found"
      x-swagger-router-controller: "User"
    delete:
      tags:
      - "user"
      summary: "Delete user"
      description: "This can only be done by the logged in user."
      operationId: "deleteUser"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "username"
        in: "path"
        description: "The name that needs to be deleted"
        required: true
        type: "string"
      responses:
        400:
          description: "Invalid username supplied"
        404:
          description: "User not found"
      x-swagger-router-controller: "User"
securityDefinitions:
  dongle_auth:
    type: "oauth2"
    authorizationUrl: "http://petstore.swagger.io/oauth/dialog"
    flow: "implicit"
    scopes:
      write:dongles: "modify dongles in your account"
      read:dongles: "read your dongles"
  api_key:
    type: "apiKey"
    name: "api_key"
    in: "header"
definitions:
  Order:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      customerId:
        type: "integer"
        format: "int64"
      dongleId:
        type: "integer"
        format: "int64"
      quantity:
        type: "integer"
        format: "int32"
      startDate:
        type: "string"
        format: "date-time"
      endDate:
        type: "string"
        format: "date-time"
      address:
        $ref: "#/definitions/Address"
      status:
        type: "string"
        description: "Order Status"
        enum:
        - "placed"
        - "approved"
        - "delivered"
      complete:
        type: "boolean"
        default: false
    xml:
      name: "Order"
    example:
      quantity: 5
      address:
        addressLineTwo: "addressLineTwo"
        town: "town"
        city: "city"
        addressLineOne: "addressLineOne"
        addressLineThree: "addressLineThree"
      dongleId: 1
      endDate: "2000-01-23T04:56:07.000+00:00"
      customerId: 6
      id: 0
      complete: false
      startDate: "2000-01-23T04:56:07.000+00:00"
      status: "placed"
  Category:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
    xml:
      name: "Category"
    example:
      name: "name"
      id: 6
  User:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      username:
        type: "string"
      firstName:
        type: "string"
      lastName:
        type: "string"
      email:
        type: "string"
      password:
        type: "string"
      phone:
        type: "string"
      userStatus:
        type: "integer"
        format: "int32"
        description: "User Status"
    xml:
      name: "User"
    example:
      firstName: "firstName"
      lastName: "lastName"
      password: "password"
      userStatus: 6
      phone: "phone"
      id: 0
      email: "email"
      username: "username"
  Customer:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      username:
        type: "string"
      firstName:
        type: "string"
      lastName:
        type: "string"
      email:
        type: "string"
      password:
        type: "string"
      phone:
        type: "string"
      userStatus:
        type: "integer"
        format: "int32"
        description: "User Status"
    xml:
      name: "Customer"
    example:
      firstName: "firstName"
      lastName: "lastName"
      password: "password"
      userStatus: 6
      phone: "phone"
      id: 0
      email: "email"
      username: "username"
  Tag:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
    xml:
      name: "Tag"
    example:
      name: "name"
      id: 1
  Dongle:
    type: "object"
    required:
    - "name"
    - "photoUrls"
    properties:
      id:
        type: "integer"
        format: "int64"
      category:
        $ref: "#/definitions/Category"
      name:
        type: "string"
        example: "Three Dongle"
      photoUrls:
        type: "array"
        xml:
          name: "photoUrl"
          wrapped: true
        items:
          type: "string"
      tags:
        type: "array"
        xml:
          name: "tag"
          wrapped: true
        items:
          $ref: "#/definitions/Tag"
      status:
        type: "string"
        description: "dongle status in the store"
        enum:
        - "available"
        - "pending"
        - "rented"
    xml:
      name: "Dongle"
    example:
      photoUrls:
      - "photoUrls"
      - "photoUrls"
      name: "Three Dongle"
      id: 0
      category:
        name: "name"
        id: 6
      tags:
      - name: "name"
        id: 1
      - name: "name"
        id: 1
      status: "available"
  Address:
    type: "object"
    properties:
      addressLineOne:
        type: "string"
      addressLineTwo:
        type: "string"
      addressLineThree:
        type: "string"
      town:
        type: "string"
      city:
        type: "string"
    xml:
      name: "Address"
    example:
      addressLineTwo: "addressLineTwo"
      town: "town"
      city: "city"
      addressLineOne: "addressLineOne"
      addressLineThree: "addressLineThree"
  ApiResponse:
    type: "object"
    properties:
      code:
        type: "integer"
        format: "int32"
      type:
        type: "string"
      message:
        type: "string"
    example:
      code: 0
      type: "type"
      message: "message"
externalDocs:
  description: "Find out more about Swagger"
  url: "http://swagger.io"
